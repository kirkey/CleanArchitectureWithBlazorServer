// <auto-generated />
using System;
using CleanArchitecture.Blazor.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanArchitecture.Blazor.Migrators.MySQL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250804060800_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.AuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("longtext")
                        .HasColumnName("affectedColumns");

                    b.Property<string>("AuditType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("auditType");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateTime");

                    b.Property<string>("DebugView")
                        .HasMaxLength(2147483647)
                        .HasColumnType("longtext")
                        .HasColumnName("debugView");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2147483647)
                        .HasColumnType("longtext")
                        .HasColumnName("errorMessage");

                    b.Property<string>("NewValues")
                        .HasColumnType("longtext")
                        .HasColumnName("newValues");

                    b.Property<string>("OldValues")
                        .HasColumnType("longtext")
                        .HasColumnName("oldValues");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("primaryKey");

                    b.Property<string>("TableName")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("tableName");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_auditTrails");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_auditTrails_userId");

                    b.ToTable("auditTrails", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.Bill", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("billDate");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dueDate");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("lastModifiedBy");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("totalAmount");

                    b.Property<string>("VendorId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("vendorId");

                    b.HasKey("Id")
                        .HasName("pK_bills");

                    b.HasIndex("BillDate")
                        .HasDatabaseName("iX_bills_billDate");

                    b.HasIndex("Status")
                        .HasDatabaseName("iX_bills_status");

                    b.HasIndex("VendorId")
                        .HasDatabaseName("iX_bills_vendorId");

                    b.ToTable("bills", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.BillItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("BillId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("billId");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("createdBy");

                    b.Property<string>("ItemName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("itemName");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("lastModifiedBy");

                    b.Property<decimal>("LineTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("lineTotal");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("unitPrice");

                    b.HasKey("Id")
                        .HasName("pK_billItems");

                    b.HasIndex("BillId")
                        .HasDatabaseName("iX_billItems_billId");

                    b.ToTable("billItems", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.ChartOfAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("accountName");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("accountType");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("createdBy");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isActive");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("lastModifiedBy");

                    b.Property<string>("SubAccountOf")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("subAccountOf");

                    b.HasKey("Id")
                        .HasName("pK_chartOfAccounts");

                    b.HasIndex("AccountName")
                        .HasDatabaseName("iX_chartOfAccounts_accountName");

                    b.ToTable("chartOfAccounts", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("createdBy");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("lastModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("phoneNumber");

                    b.HasKey("Id")
                        .HasName("pK_contacts");

                    b.ToTable("contacts", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("BillingAddress")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("billingAddress");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("contactPerson");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("createdBy");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("customerName");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("lastModifiedBy");

                    b.Property<string>("Terms")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("terms");

                    b.HasKey("Id")
                        .HasName("pK_customers");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("createdBy");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("description");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("documentType");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isPublic");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("lastModifiedBy");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("TenantId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("tenantId");

                    b.Property<string>("Title")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pK_documents");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("iX_documents_createdBy");

                    b.HasIndex("LastModifiedBy")
                        .HasDatabaseName("iX_documents_lastModifiedBy");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("iX_documents_tenantId");

                    b.ToTable("documents", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.GeneralLedger", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("AccountId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("accountId");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("createdBy");

                    b.Property<decimal>("Credit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("credit");

                    b.Property<decimal>("Debit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("debit");

                    b.Property<string>("EntryId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("entryId");

                    b.Property<string>("JournalEntryId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("journalEntryId");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("lastModifiedBy");

                    b.Property<string>("Memo")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("memo");

                    b.HasKey("Id")
                        .HasName("pK_generalLedgers");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("iX_generalLedgers_accountId");

                    b.HasIndex("EntryId")
                        .HasDatabaseName("iX_generalLedgers_entryId");

                    b.HasIndex("JournalEntryId")
                        .HasDatabaseName("iX_generalLedgers_journalEntryId");

                    b.ToTable("generalLedgers", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.Invoice", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("createdBy");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("customerId");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dueDate");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("invoiceDate");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("lastModifiedBy");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("totalAmount");

                    b.HasKey("Id")
                        .HasName("pK_invoices");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("iX_invoices_customerId");

                    b.HasIndex("InvoiceDate")
                        .HasDatabaseName("iX_invoices_invoiceDate");

                    b.HasIndex("Status")
                        .HasDatabaseName("iX_invoices_status");

                    b.ToTable("invoices", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.InvoiceItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("createdBy");

                    b.Property<string>("InvoiceId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("invoiceId");

                    b.Property<string>("ItemName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("itemName");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("lastModifiedBy");

                    b.Property<decimal>("LineTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("lineTotal");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("unitPrice");

                    b.HasKey("Id")
                        .HasName("pK_invoiceItems");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("iX_invoiceItems_invoiceId");

                    b.ToTable("invoiceItems", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.JournalEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isPosted");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("lastModifiedBy");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("referenceNumber");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("source");

                    b.HasKey("Id")
                        .HasName("pK_journalEntries");

                    b.HasIndex("Date")
                        .HasDatabaseName("iX_journalEntries_date");

                    b.HasIndex("ReferenceNumber")
                        .HasDatabaseName("iX_journalEntries_referenceNumber");

                    b.ToTable("journalEntries", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("createdBy");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("customerId");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("lastModifiedBy");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("paymentDate");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("paymentMethod");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("referenceNumber");

                    b.HasKey("Id")
                        .HasName("pK_payments");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("iX_payments_customerId");

                    b.HasIndex("PaymentDate")
                        .HasDatabaseName("iX_payments_paymentDate");

                    b.HasIndex("ReferenceNumber")
                        .HasDatabaseName("iX_payments_referenceNumber");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.PicklistSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("createdBy");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("lastModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.Property<string>("Text")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("text");

                    b.Property<string>("Value")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pK_picklistSets");

                    b.HasIndex("Name", "Value")
                        .IsUnique()
                        .HasDatabaseName("iX_picklistSets_name_value");

                    b.ToTable("picklistSets", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("brand");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("createdBy");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("lastModifiedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("name");

                    b.Property<string>("Pictures")
                        .HasColumnType("longtext")
                        .HasColumnName("pictures");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.Property<string>("Unit")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("unit");

                    b.HasKey("Id")
                        .HasName("pK_products");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("iX_products_name");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.SystemLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientAgent")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("clientAgent");

                    b.Property<string>("ClientIp")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("clientIp");

                    b.Property<string>("Exception")
                        .HasMaxLength(2147483647)
                        .HasColumnType("longtext")
                        .HasColumnName("exception");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("level");

                    b.Property<string>("LogEvent")
                        .HasMaxLength(2147483647)
                        .HasColumnType("longtext")
                        .HasColumnName("logEvent");

                    b.Property<string>("Message")
                        .HasMaxLength(2147483647)
                        .HasColumnType("longtext")
                        .HasColumnName("message");

                    b.Property<string>("MessageTemplate")
                        .HasMaxLength(2147483647)
                        .HasColumnType("longtext")
                        .HasColumnName("messageTemplate");

                    b.Property<string>("Properties")
                        .HasMaxLength(2147483647)
                        .HasColumnType("longtext")
                        .HasColumnName("properties");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timeStamp");

                    b.Property<string>("UserName")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("userName");

                    b.HasKey("Id")
                        .HasName("pK_systemLogs");

                    b.HasIndex("Level")
                        .HasDatabaseName("iX_systemLogs_level");

                    b.HasIndex("TimeStamp")
                        .HasDatabaseName("iX_systemLogs_timeStamp");

                    b.ToTable("systemLogs", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.Tenant", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pK_tenants");

                    b.ToTable("tenants", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.Vendor", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("BillingAddress")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("billingAddress");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("contactPerson");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("createdBy");

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("varchar(254)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("lastModifiedBy");

                    b.Property<string>("Terms")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("terms");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("vendorName");

                    b.HasKey("Id")
                        .HasName("pK_vendors");

                    b.HasIndex("Email")
                        .HasDatabaseName("iX_vendors_email");

                    b.HasIndex("VendorName")
                        .HasDatabaseName("iX_vendors_vendorName");

                    b.ToTable("vendors", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("concurrencyStamp");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("createdBy");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("lastModifiedBy");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalizedName");

                    b.Property<string>("TenantId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("tenantId");

                    b.HasKey("Id")
                        .HasName("pK_AspNetRoles");

                    b.HasIndex("NormalizedName")
                        .HasDatabaseName("RoleNameIndex");

                    b.HasIndex("TenantId", "Name")
                        .IsUnique()
                        .HasDatabaseName("iX_AspNetRoles_tenantId_name");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("claimType");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("claimValue");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("description");

                    b.Property<string>("Group")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("group");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("roleId");

                    b.HasKey("Id")
                        .HasName("pK_AspNetRoleClaims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("iX_AspNetRoleClaims_roleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("accessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("concurrencyStamp");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("displayName");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("emailConfirmed");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isActive");

                    b.Property<bool>("IsLive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isLive");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("languageCode");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastModified");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("lockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalizedEmail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalizedUserName");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("passwordHash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("phoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("phoneNumberConfirmed");

                    b.Property<string>("ProfilePictureDataUrl")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("profilePictureDataUrl");

                    b.Property<string>("Provider")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("provider");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("refreshToken");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("refreshTokenExpiryTime");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("securityStamp");

                    b.Property<string>("SuperiorId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("superiorId");

                    b.Property<string>("TenantId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("tenantId");

                    b.Property<string>("TimeZoneId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("timeZoneId");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("twoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("userName");

                    b.HasKey("Id")
                        .HasName("pK_AspNetUsers");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("SuperiorId")
                        .HasDatabaseName("iX_AspNetUsers_superiorId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("iX_AspNetUsers_tenantId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("claimType");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("claimValue");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("description");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_AspNetUserClaims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_AspNetUserClaims_userId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("loginProvider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("providerKey");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("providerDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("userId");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pK_AspNetUserLogins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_AspNetUserLogins_userId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Identity.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("userId");

                    b.Property<string>("RoleId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("roleId");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pK_AspNetUserRoles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("iX_AspNetUserRoles_roleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Identity.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("userId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("loginProvider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pK_AspNetUserTokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Identity.LoginAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("browserInfo");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("createdBy");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ipAddress");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("lastModifiedBy");

                    b.Property<DateTime>("LoginTimeUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("loginTimeUtc");

                    b.Property<string>("Provider")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("provider");

                    b.Property<string>("Region")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("region");

                    b.Property<bool>("Success")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("success");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("userId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("userName");

                    b.HasKey("Id")
                        .HasName("pK_loginAudits");

                    b.HasIndex("LoginTimeUtc")
                        .HasDatabaseName("iX_loginAudits_loginTimeUtc");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_loginAudits_userId");

                    b.HasIndex("UserId", "LoginTimeUtc")
                        .HasDatabaseName("iX_loginAudits_userId_loginTimeUtc");

                    b.ToTable("loginAudits", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Identity.UserLoginRiskSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Advice")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("advice");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("createdBy");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastModified");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("lastModifiedBy");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("riskLevel");

                    b.Property<int>("RiskScore")
                        .HasColumnType("int")
                        .HasColumnName("riskScore");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("userId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("userName");

                    b.HasKey("Id")
                        .HasName("pK_userLoginRiskSummaries");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_userLoginRiskSummaries_userId");

                    b.HasIndex("UserName")
                        .HasDatabaseName("iX_userLoginRiskSummaries_userName");

                    b.ToTable("userLoginRiskSummaries", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("friendlyName");

                    b.Property<string>("Xml")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("xml");

                    b.HasKey("Id")
                        .HasName("pK_dataProtectionKeys");

                    b.ToTable("dataProtectionKeys", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.AuditTrail", b =>
                {
                    b.HasOne("CleanArchitecture.Blazor.Domain.Identity.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fK_auditTrails_AspNetUsers_userId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.BillItem", b =>
                {
                    b.HasOne("CleanArchitecture.Blazor.Domain.Entities.Bill", null)
                        .WithMany("Items")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fK_billItems_bills_billId");
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.Document", b =>
                {
                    b.HasOne("CleanArchitecture.Blazor.Domain.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fK_documents_AspNetUsers_createdBy");

                    b.HasOne("CleanArchitecture.Blazor.Domain.Identity.ApplicationUser", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fK_documents_AspNetUsers_lastModifiedBy");

                    b.HasOne("CleanArchitecture.Blazor.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .HasConstraintName("fK_documents_tenants_tenantId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.GeneralLedger", b =>
                {
                    b.HasOne("CleanArchitecture.Blazor.Domain.Entities.JournalEntry", null)
                        .WithMany("LedgerLines")
                        .HasForeignKey("JournalEntryId")
                        .HasConstraintName("fK_generalLedgers_journalEntries_journalEntryId");
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.InvoiceItem", b =>
                {
                    b.HasOne("CleanArchitecture.Blazor.Domain.Entities.Invoice", null)
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fK_invoiceItems_invoices_invoiceId");
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Identity.ApplicationRole", b =>
                {
                    b.HasOne("CleanArchitecture.Blazor.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .HasConstraintName("fK_AspNetRoles_tenants_tenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("CleanArchitecture.Blazor.Domain.Identity.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_AspNetRoleClaims_AspNetRoles_roleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Identity.ApplicationUser", b =>
                {
                    b.HasOne("CleanArchitecture.Blazor.Domain.Identity.ApplicationUser", "Superior")
                        .WithMany()
                        .HasForeignKey("SuperiorId")
                        .HasConstraintName("fK_AspNetUsers_AspNetUsers_superiorId");

                    b.HasOne("CleanArchitecture.Blazor.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .HasConstraintName("fK_AspNetUsers_tenants_tenantId");

                    b.Navigation("Superior");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("CleanArchitecture.Blazor.Domain.Identity.ApplicationUser", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_AspNetUserClaims_AspNetUsers_userId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("CleanArchitecture.Blazor.Domain.Identity.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_AspNetUserLogins_AspNetUsers_userId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("CleanArchitecture.Blazor.Domain.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_AspNetUserRoles_AspNetRoles_roleId");

                    b.HasOne("CleanArchitecture.Blazor.Domain.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_AspNetUserRoles_AspNetUsers_userId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("CleanArchitecture.Blazor.Domain.Identity.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_AspNetUserTokens_AspNetUsers_userId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Identity.LoginAudit", b =>
                {
                    b.HasOne("CleanArchitecture.Blazor.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_loginAudits_AspNetUsers_userId");
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Identity.UserLoginRiskSummary", b =>
                {
                    b.HasOne("CleanArchitecture.Blazor.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_userLoginRiskSummaries_AspNetUsers_userId");
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.Bill", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Entities.JournalEntry", b =>
                {
                    b.Navigation("LedgerLines");
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Identity.ApplicationRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CleanArchitecture.Blazor.Domain.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserClaims");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
