@page "/pages/Contacts/view/{id:int}"
@using CleanArchitecture.Blazor.Application.Features.Contacts.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.Contacts.DTOs
@using CleanArchitecture.Blazor.Application.Features.Contacts.Queries.GetById
@inherits MudComponentBase
@inject IStringLocalizer<Contacts> L

<PageTitle>@Title</PageTitle>
<Breadcrumbs BreadcrumbItems="_breadcrumbItems" OnGoEditClick="GoEdit" OnDeleteClick="Delete"></Breadcrumbs>
<MudContainer Class="mt-3" MaxWidth="MaxWidth.Medium">
    @if (dto != null)
    {
        <MudCard Class="pa-2">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@Title</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid Spacing="3" Class="readonly-grid">
                    <MudItem xs="12" md="6">
                        <ReadOnlyFieldX6 Label="@L[dto.GetMemberDescription(x => x.Name)]" Value="@dto.Name"></ReadOnlyFieldX6>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <ReadOnlyFieldX6 Label="@L[dto.GetMemberDescription(x => x.Email)]" Value="@dto.Email"></ReadOnlyFieldX6>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <ReadOnlyFieldX6 Label="@L[dto.GetMemberDescription(x => x.PhoneNumber)]" Value="@dto.PhoneNumber"></ReadOnlyFieldX6>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <ReadOnlyFieldX6 Label="@L[dto.GetMemberDescription(x => x.Country)]" Value="@dto.Country"></ReadOnlyFieldX6>
                    </MudItem>
                    <MudItem xs="12" md="12">
                        <ReadOnlyFieldX12 Label="@L[dto.GetMemberDescription(x => x.Description)]" Value="@dto.Description"></ReadOnlyFieldX12>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
            <MudCardActions></MudCardActions>
        </MudCard>
    }
</MudContainer>


@code {
    public string? Title { get; private set; }
    [Parameter]
    public int Id { get; set; }
    private List<BreadcrumbItem> _breadcrumbItems = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Contacts", href: "/pages/Contacts")
    };
    private ContactDto? dto;
    protected override async Task OnInitializedAsync()
    {
        Title = L["Contact"];
        var result = await Mediator.Send(new GetContactByIdQuery() { Id = Id });
        result.Map(data =>
        {
            dto = data;
            return data;
        }).Match(data =>
        {
            _breadcrumbItems.Add(new BreadcrumbItem(data.Name, null, disabled: true));
            return data;

        }, errors =>
        {
            Snackbar.Add(errors, MudBlazor.Severity.Error);
            return null!;
        });

    }
    void GoEdit()
    {
        Navigation.NavigateTo($"/pages/Contacts/edit/{Id}");
    }
    async Task Delete()
    {
        var contentText = string.Format(ConstantString.DeleteConfirmation, dto!.Name);
        var command = new DeleteContactCommand(new int[] { dto.Id });
        await DialogServiceHelper.ShowDeleteConfirmationDialogAsync(command, ConstantString.DeleteConfirmationTitle, contentText, async () =>
        {
            await InvokeAsync(() =>
            {
                Navigation.NavigateTo($"/pages/Contacts");
            });
        });
    }
}
