@using CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.Commands.AddEdit
@using CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.Commands.Create

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<ChartOfAccounts> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@_model" @ref="@_form" Validation="@(Validator.ValidateValue(_model))">
            <MudGrid>
                <MudItem xs="12" md="6"> 
                    <MudTextField Label="@L[_model.GetMemberDescription(x=>x.Name)]" @bind-Value="_model.Name" For="@(() => _model.Name)" Required="true" RequiredError="@L["account name is required!"]"></MudTextField>
                </MudItem> 
                <MudItem xs="12" md="6"> 
                    <MudSelect T="AccountType" Label="@L[_model.GetMemberDescription(x=>x.AccountType)]" @bind-Value="_model.AccountType" For="@(() => _model.AccountType)" Required="true">
                        @foreach (AccountType item in Enum.GetValues<AccountType>())
                        {
                            <MudSelectItem Value="@item">@item.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem> 
                <MudItem xs="12" md="6"> 
                    <MudTextField Label="@L[_model.GetMemberDescription(x=>x.SubAccountOf)]" @bind-Value="_model.SubAccountOf" For="@(() => _model.SubAccountOf)"></MudTextField>
                </MudItem> 
                <MudItem xs="12" md="12"> 
                    <MudTextField Label="@L[_model.GetMemberDescription(x=>x.Description)]" @bind-Value="_model.Description" For="@(() => _model.Description)" Lines="3"></MudTextField>
                </MudItem> 
                <MudItem xs="12" md="6"> 
                    <MudSwitch @bind-Checked="_model.IsActive" Label="@L[_model.GetMemberDescription(x=>x.IsActive)]" Color="Color.Primary"></MudSwitch>
                </MudItem> 
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@_savingnew" OnClick="OnSaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton>
        <MudLoadingButton Loading="@_saving" OnClick="OnSubmit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm _form = new();
    private bool _saving = false;
    private bool _savingnew = false;
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = default!;
    [EditorRequired] [Parameter] public AddEditChartOfAccountCommand _model { get; set; } = null!;
    
    async Task OnSubmit()
    {
        try
        {
            _saving = true;
            await _form.Validate().ConfigureAwait(false);
            if (!_form.IsValid)
                return;
            var result = await Mediator.Send(_model);
            await result.MatchAsync(
                data =>
                {
                    MudDialog.Close(DialogResult.Ok(true));
                    Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
                    return Task.CompletedTask;
                },
                errors =>
                {
                    Snackbar.Add(errors, Severity.Error);
                    return Task.CompletedTask;
                });
        }
        finally
        {
            _saving = false;
        }
    }
    
    async Task OnSaveAndNew()
    {
        try
        {
            _savingnew = true;
            await _form.Validate().ConfigureAwait(false);
            if (!_form.IsValid)
                return;
            var result = await Mediator.Send(_model);
            await result.MatchAsync(
                data =>
                {
                    Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
                    _model = new AddEditChartOfAccountCommand();
                    return Task.CompletedTask;
                },
                errors =>
                {
                    Snackbar.Add(errors, Severity.Error);
                    return Task.CompletedTask;
                });
        }
        finally
        {
            _savingnew = false;
        }
    }
    
    void Cancel() => MudDialog.Cancel();
}
