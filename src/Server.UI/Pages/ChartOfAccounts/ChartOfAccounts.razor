@page "/pages/chartofaccounts"

@using CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.Caching
@using CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.Commands.AddEdit
@using CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.Commands.Import
@using CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.DTOs
@using CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.Queries.Export
@using CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.Queries.Pagination
@using CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.Specifications
@using CleanArchitecture.Blazor.Server.UI.Pages.ChartOfAccounts.Components

@inject IStringLocalizer<ChartOfAccounts> L
@inject BlazorDownloadFileService BlazorDownloadFileService

@attribute [Authorize(Policy = Permissions.Accounting.View)]
<PageTitle>@Title</PageTitle>

<MudDataGrid ServerData="@(ServerReload)"
             FixedHeader="true"
             FixedFooter="false"
             Virtualize="false"
             @bind-RowsPerPage="_defaultPageSize"
             Loading="@_loading"
             MultiSelection="true"
             T="ChartOfAccountDto"
             SelectOnRowClick="false"
             RowClick="@(s=>OnDataGridRowClick(s.Item))"
             @bind-SelectedItems="_selectedAccounts"
             Hover="true" @ref="_accountsGrid">
    <ToolBarContent>
        <MudStack Row Spacing="0" Class="flex-grow-1" Justify="Justify.SpaceBetween">
            <MudStack Row AlignItems="AlignItems.Start">
                <MudIcon Icon="@Icons.Material.Filled.AccountBalance" Size="Size.Large" />
                <MudStack Spacing="0">
                    <MudText Typo="Typo.subtitle2" Class="mb-2">@Title</MudText>
                </MudStack>
            </MudStack>
            <MudStack Spacing="0" AlignItems="AlignItems.End">
                <MudToolBar Dense WrapContent="true" Class="py-1 px-0">
                    <MudButton Disabled="@_loading"
                               OnClick="@(() => OnRefresh())"
                               StartIcon="@Icons.Material.Outlined.Refresh">
                        @ConstantString.Refresh
                    </MudButton>
                    @if (_accessRights.Create)
                    {
                        <MudButton StartIcon="@Icons.Material.Outlined.Add"
                                   OnClick="OnCreate">
                            @ConstantString.New
                        </MudButton>
                    }
                    <MudMenu TransformOrigin="Origin.BottomRight" AnchorOrigin="Origin.BottomRight" EndIcon="@Icons.Material.Filled.MoreVert" Label="@ConstantString.More">
                        @if (_accessRights.Create)
                        {
                            <MudMenuItem Disabled="@(_selectedAccounts.Count != 1)" OnClick="OnClone">@ConstantString.Clone</MudMenuItem>
                        }
                        @if (_accessRights.Delete)
                        {
                            <MudMenuItem Disabled="@(!(_selectedAccounts.Count > 0))"
                                         OnClick="OnDeleteSelected">
                                @ConstantString.Delete
                            </MudMenuItem>
                        }
                        @if (_accessRights.Export)
                        {
                            <MudMenuItem Disabled="@_exporting"
                                         OnClick="OnExport">
                                @ConstantString.Export
                            </MudMenuItem>
                        }
                        @if (_accessRights.Import)
                        {
                            <MudMenuItem>
                                <MudFileUpload T="IBrowserFile" FilesChanged="OnImportData" Accept=".xlsx">
                                    <ActivatorContent>
                                        <MudButton Class="pa-0 ma-0" Style="font-weight:400;text-transform:none;"
                                                   Variant="Variant.Text"
                                                   Disabled="@_uploading">
                                            @ConstantString.Import
                                        </MudButton>
                                    </ActivatorContent>
                                </MudFileUpload>
                            </MudMenuItem>
                        }
                    </MudMenu>
                </MudToolBar>
                <MudStack Row Spacing="1">
                    @if (_accessRights.Search)
                    {
                        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Value="@_query.Keyword" Placeholder="@ConstantString.Search" Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small">
                        </MudTextField>
                    }
                </MudStack>
            </MudStack>
        </MudStack>
    </ToolBarContent>
    <Columns>
        <SelectColumn ShowInFooter="false"></SelectColumn>
        <TemplateColumn HeaderStyle="width:60px" Title="@ConstantString.Actions" Sortable="false">
            <CellTemplate>
                @if (_accessRights.Edit || _accessRights.Delete)
                {
                    <MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Size="Size.Small"
                             Dense="true"
                             EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" AnchorOrigin="Origin.CenterLeft">
                        @if (_accessRights.Edit)
                        {
                            <MudMenuItem OnClick="@(()=>OnEdit(context.Item))">@ConstantString.Edit</MudMenuItem>
                        }
                        @if (_accessRights.Delete)
                        {
                            <MudMenuItem OnClick="@(()=>OnDelete(context.Item))">@ConstantString.Delete</MudMenuItem>
                        }
                    </MudMenu>
                }
                else
                {
                    <MudTooltip Text="@ConstantString.NoAllowed" Delay="300">
                        <MudIconButton Variant="Variant.Outlined"  
                                       Disabled="true"
                                       Icon="@Icons.Material.Filled.DoNotTouch"
                                       Size="Size.Small"
                                       Color="Color.Surface">
                        </MudIconButton>
                    </MudTooltip>
                }
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Name" Title="@L[_dto.GetMemberDescription(x=>x.Name)]"> 
            <CellTemplate>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.body1">@context.Item.Name</MudText>
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">@context.Item.Description</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.AccountType" Title="@L[_dto.GetMemberDescription(x=>x.AccountType)]" />
        <PropertyColumn Property="x => x.SubAccountOf" Title="@L[_dto.GetMemberDescription(x=>x.SubAccountOf)]" />
        <PropertyColumn Property="x => x.IsActive" Title="@L[_dto.GetMemberDescription(x=>x.IsActive)]">
            <CellTemplate>
                <MudChip Size="Size.Small" Color="@(context.Item.IsActive ? Color.Success : Color.Error)">
                    @(context.Item.IsActive ? "Active" : "Inactive")
                </MudChip>
            </CellTemplate>
        </PropertyColumn>
    </Columns>
    <NoRecordsContent>
        <MudText>@ConstantString.NoRecords</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>@ConstantString.Loading</MudText>
    </LoadingContent>
    <PagerContent>
        <MudDataGridPager T="ChartOfAccountDto" />
    </PagerContent>
</MudDataGrid>

@code {
    public string? Title { get; private set; }
    private int _defaultPageSize = 15;
    private HashSet<ChartOfAccountDto> _selectedAccounts = new HashSet<ChartOfAccountDto>();
    private MudDataGrid<ChartOfAccountDto> _accountsGrid = default!;
    private ChartOfAccountDto _dto = new();
    private bool _loading;
    private bool _uploading;
    private bool _exporting;
    [CascadingParameter]
    private UserProfile? UserProfile { get; set; }

    private ChartOfAccountsWithPaginationQuery _query { get; set; } = new();
    private ChartOfAccountsAccessRights _accessRights = new();

    protected override async Task OnInitializedAsync()
    {
        Title = L[_dto.GetClassDescription()];
        _accessRights = await PermissionService.GetAccessRightsAsync<ChartOfAccountsAccessRights>(); 
    }
     
    private async Task<GridData<ChartOfAccountDto>> ServerReload(GridState<ChartOfAccountDto> state)
    {
        try
        {
            _loading = true;
            _query.CurrentUser = UserProfile;
            var sortDefinition = state.SortDefinitions.FirstOrDefault();
            _query.OrderBy = sortDefinition?.SortBy ?? "Id";
            _query.SortDirection = (sortDefinition != null && sortDefinition.Descending)
                                      ? SortDirection.Descending.ToString()
                                      : SortDirection.Ascending.ToString();
            _query.PageNumber = state.Page + 1;
            _query.PageSize = state.PageSize;
            var result = await Mediator.Send(_query).ConfigureAwait(false);
            return new GridData<ChartOfAccountDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnSearch(string text)
    {
        _selectedAccounts.Clear();
        _query.Keyword = text;
        await _accountsGrid.ReloadServerData();
    }

    private async Task OnRefresh()
    {
        ChartOfAccountCacheKey.Refresh();
        _selectedAccounts.Clear();
        _query.Keyword = string.Empty;
        await _accountsGrid.ReloadServerData();
    }

    private Task ShowEditFormDialog(string title, AddEditChartOfAccountCommand command)
    {
        return DialogServiceHelper.ShowFormDialogAsync<ChartOfAccountFormDialog, AddEditChartOfAccountCommand>(
            title,
            command,
            async () =>
            {
                await _accountsGrid.ReloadServerData();
                _selectedAccounts.Clear();
            });
    }

    private void OnDataGridRowClick(ChartOfAccountDto dto)
    {
        Navigation.NavigateTo($"/pages/chartofaccounts/view/{dto.Id}");
    }

    private Task OnCreate()
    {
        var command = new AddEditChartOfAccountCommand();
        return ShowEditFormDialog(L["New Chart of Account"], command);
    }

    private Task OnClone()
    {
        var dto = _selectedAccounts.First();
        var command = new AddEditChartOfAccountCommand()
        {
            AccountName = dto.Name,
            AccountType = dto.AccountType,
            SubAccountOf = dto.SubAccountOf,
            Description = dto.Description,
            IsActive = dto.IsActive
        };
        return ShowEditFormDialog(L["Clone Chart of Account"], command);
    }

    private Task OnEdit(ChartOfAccountDto dto)
    {
        Navigation.NavigateTo($"/pages/chartofaccounts/edit/{dto.Id}");
        return Task.CompletedTask;
    }

    private Task OnDelete(ChartOfAccountDto dto)
    {
        var contentText = string.Format(ConstantString.DeleteConfirmation, dto.Name);
        var command = new DeleteChartOfAccountCommand(new string[] { dto.Id });
        return DeleteInternal(command, contentText); 
    }

    private Task OnDeleteSelected()
    {
        var contentText = string.Format(ConstantString.DeleteConfirmWithSelected, _selectedAccounts.Count);
        var command = new DeleteChartOfAccountCommand(_selectedAccounts.Select(x => x.Id).ToArray());
        return DeleteInternal(command, contentText);
    }

    private Task DeleteInternal(DeleteChartOfAccountCommand command, string contentText)
    {
        return DialogServiceHelper.ShowDeleteConfirmationDialogAsync(
            command,
            ConstantString.DeleteConfirmationTitle,
            contentText,
            async () =>
            {
                await _accountsGrid.ReloadServerData();
                _selectedAccounts.Clear();
            });
    }

    private async Task OnExport()
    {
        _exporting = true;
        var request = new ExportChartOfAccountsQuery()
        {
            Keyword = _query.Keyword,
            CurrentUser = UserProfile,
            OrderBy = _accountsGrid.SortDefinitions.Values.FirstOrDefault()?.SortBy ?? "Id",
            SortDirection = (_accountsGrid.SortDefinitions.Values.FirstOrDefault()?.Descending ?? true) ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString()
        };
        var result = await Mediator.Send(request);
        await result.MatchAsync(
            async data =>
            {
                if (result.Data != null)
                {
                    await BlazorDownloadFileService.DownloadFileAsync($"{L["Chart of Accounts"]}.xlsx", result.Data, contentType:"application/octet-stream");
                    Snackbar.Add($"{ConstantString.ExportSuccess}", MudBlazor.Severity.Info);
                }
                else
                {
                    Snackbar.Add("Export failed", MudBlazor.Severity.Error);
                }
            },
            errors =>
            {
                Snackbar.Add($"{errors}", MudBlazor.Severity.Error);
                return Task.CompletedTask;
            });
        _exporting = false;
    }

    private async Task OnImportData(IBrowserFile file)
    {
        _uploading = true;
        var stream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(stream);
        var command = new ImportChartOfAccountsCommand(file.Name, stream.ToArray());
        var result = await Mediator.Send(command);
        await result.MatchAsync(
            async data =>
            {
                await _accountsGrid.ReloadServerData();
                Snackbar.Add($"{ConstantString.ImportSuccess}", MudBlazor.Severity.Info);
            }, errors =>
            {
                Snackbar.Add($"{errors}", MudBlazor.Severity.Error);
                return Task.CompletedTask;
            });
        _uploading = false;
    }
}
