@page "/pages/invoices/create"
@using CleanArchitecture.Blazor.Application.Features.Invoices.Commands.Create

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<Invoices> L
@attribute [Authorize(Policy = Permissions.Invoices.Create)]

<PageTitle>@Title</PageTitle>
<Breadcrumbs OnSaveButtonClick="OnSubmit" Saving="_saving" BreadcrumbItems="_breadcrumbItems"></Breadcrumbs>
<MudContainer Class="mt-3" MaxWidth="MaxWidth.Large">
    <MudCard Class="pa-2">
        <MudCardHeader>
            <CardHeaderContent>
                 <MudText Typo="Typo.h6">@Title</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
        <MudForm Model="@_model" @ref="@_form" Validation="@(Validator.ValidateValue(_model))">
            <MudGrid Spacing="2">
                <MudItem xs="12" md="6"> 
                    <MudTextField Label="@L[_model.GetMemberDescription(x=>x.CustomerId)]" @bind-Value="_model.CustomerId" For="@(() => _model.CustomerId)" Required="true" RequiredError="@L["customer id is required!"]"></MudTextField>
                </MudItem> 
                <MudItem xs="12" md="6"> 
                    <MudDatePicker Label="@L[_model.GetMemberDescription(x=>x.InvoiceDate)]" @bind-Date="_model.InvoiceDate" For="@(() => _model.InvoiceDate)" Required="true"></MudDatePicker>
                </MudItem> 
                <MudItem xs="12" md="6"> 
                    <MudDatePicker Label="@L[_model.GetMemberDescription(x=>x.DueDate)]" @bind-Date="_model.DueDate" For="@(() => _model.DueDate)" Required="true"></MudDatePicker>
                </MudItem> 
                <MudItem xs="12" md="6"> 
                    <MudNumericField T="decimal" Label="@L[_model.GetMemberDescription(x=>x.TotalAmount)]" @bind-Value="_model.TotalAmount" For="@(() => _model.TotalAmount)" Format="C" Required="true"></MudNumericField>
                </MudItem> 
                <MudItem xs="12" md="6"> 
                    <MudSelect T="InvoiceStatus" Label="@L[_model.GetMemberDescription(x=>x.Status)]" @bind-Value="_model.Status" For="@(() => _model.Status)" Required="true">
                        @foreach (InvoiceStatus item in Enum.GetValues<InvoiceStatus>())
                        {
                            <MudSelectItem Value="@item">@item.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem> 
            </MudGrid>
        </MudForm>
        </MudCardContent>
         <MudCardActions Class="d-flex justify-end gap-2">
                    <MudLoadingButton Color="Color.Primary" DropShadow="false" Loading="@_saving" OnClick="OnSubmit">@ConstantString.Save</MudLoadingButton>
         </MudCardActions>
        </MudCard>
</MudContainer>

@code {
    public string? Title { get; private set; }
    MudForm _form = new();
    private bool _saving = false;
    private List<BreadcrumbItem>? _breadcrumbItems;
    private CreateInvoiceCommand _model = new();

    protected override async Task OnInitializedAsync()
    {
        Title = L["Create Invoice"];
        _breadcrumbItems = new List<BreadcrumbItem>
        {
            new(L["Home"], href: "/"),
            new(L["Invoices"], href: "/pages/invoices"),
            new(L["Create"], href: null, disabled: true)
        };
        _model.InvoiceDate = DateTime.Now;
        _model.DueDate = DateTime.Now.AddDays(30);
        _model.Status = InvoiceStatus.Open;
    }

    async Task OnSubmit()
    {
        try
        {
            _saving = true;
            await _form.Validate().ConfigureAwait(false);
            if (!_form.IsValid)
                return;
            var result = await Mediator.Send(_model);
            await result.MatchAsync(
                data =>
                {
                    Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
                    Navigation.NavigateTo("/pages/invoices");
                    return Task.CompletedTask;
                },
                errors =>
                {
                    Snackbar.Add(errors, Severity.Error);
                    return Task.CompletedTask;
                });
        }
        finally
        {
            _saving = false;
        }
    }
}
