@using Severity = Severity
@using Toolbelt.Blazor.HotKeys2
@using CleanArchitecture.Blazor.Server.UI.Services.UserPreferences
@using CleanArchitecture.Blazor.Server.UI.Constants
@layout MainLayout
@inherits LayoutComponentBase

@inject LayoutService LayoutService
@inject HotKeys HotKeys
@inject IStringLocalizer<SharedResource> L
<MudLayout>
    <AuthorizeView>
        <NotAuthorized>
            <RedirectToLogin />
        </NotAuthorized>
        <Authorized>
            <HeaderMenu NavigationMenuDrawerOpen="_navigationMenuDrawerOpen"
                        OpenSearchDialog="OpenSearchDialog"
                        IsDarkMode="@LayoutService.IsDarkMode"
                        ToggleNavigationMenuDrawer="ToggleNavigationMenuDrawer"
                        RightToLeft="@LayoutService.IsRTL"
                        RightToLeftToggle="LayoutService.ToggleRightToLeft"
                        OnSettingClick="@(() => _themingDrawerOpen = true)" />
            <NavigationMenu DrawerOpen="_navigationMenuDrawerOpen"
                            DrawerOpenChanged="NavigationMenuDrawerOpenChangedHandler" />
            <ThemesMenu ThemingDrawerOpen="_themingDrawerOpen"
                        ThemingDrawerOpenChanged="ThemingDrawerOpenChangedHandler"
                        UserPreferences="_userPreferences"
                        UserPreferencesChanged="LayoutService.UpdateUserPreferences" />
            <ThemesButton OnClick="@(() => _themingDrawerOpen = true)" />
            <MudMainContent>
                <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mb-4 mt-4">
                    <ErrorBoundary @ref="_errorBoundary">
                        <ChildContent>
                            @Body
                        </ChildContent>
                        <ErrorContent Context="exception">
                            <CustomError Exception="exception"></CustomError>
                        </ErrorContent>
                    </ErrorBoundary>
                </MudContainer>
            </MudMainContent>
            <UserLoginState />
        </Authorized>
    </AuthorizeView>
</MudLayout>


@code
{
    private bool _commandPaletteOpen;
    private HotKeysContext? _hotKeysContext;
    private bool _navigationMenuDrawerOpen = true;
    private UserPreferences _userPreferences = new();
    private MudThemeProvider _mudThemeProvider = null!;
    private bool _themingDrawerOpen;
    private bool _defaultDarkMode;

     private ErrorBoundary? _errorBoundary { set; get; }

    protected override void OnParametersSet()
    {
        ResetBoundary();
    }

    private void ResetBoundary()
    {
        // On each page navigation, reset any error state
        _errorBoundary?.Recover();
    }

    protected void NavigationMenuDrawerOpenChangedHandler(bool state)
    {
        _navigationMenuDrawerOpen = state;
    }

    protected void ThemingDrawerOpenChangedHandler(bool state)
    {
        _themingDrawerOpen = state;
    }

    protected void ToggleNavigationMenuDrawer()
    {
        _navigationMenuDrawerOpen = !_navigationMenuDrawerOpen;
    }

    private async Task OpenSearchDialog()
    {
        if (!_commandPaletteOpen)
        {
            var options = new DialogOptions
                {
                    NoHeader = true,
                    MaxWidth = MaxWidth.Medium,
                    FullWidth = true
                };

            var commandPalette = DialogService.Show<SearchDialog>("", options);
            _commandPaletteOpen = true;

            await commandPalette.Result;
            _commandPaletteOpen = false;
        }
    }
}