@using Severity = Severity
@using Toolbelt.Blazor.HotKeys2
@using CleanArchitecture.Blazor.Server.UI.Services.UserPreferences
@using CleanArchitecture.Blazor.Server.UI.Constants
@inherits LayoutComponentBase

@inject LayoutService LayoutService
@inject HotKeys HotKeys
@inject IStringLocalizer<SharedResource> L

<PageTitle>@Settings.AppName</PageTitle>
<MudRTLProvider RightToLeft="@LayoutService.IsRTL">
    <MudDialogProvider/>
    <MudSnackbarProvider/>
    <MudThemeProvider @ref="@_mudThemeProvider" Theme="@LayoutService.CurrentTheme" IsDarkMode="@LayoutService.IsDarkMode" IsDarkModeChanged="@LayoutService.SetDarkMode"/>
    @Body
</MudRTLProvider>

@code
{
    private HotKeysContext? _hotKeysContext;
    private UserPreferences _userPreferences = new();
    private MudThemeProvider _mudThemeProvider = null!;
    private bool _defaultDarkMode;

   

    public void Dispose()
    {
        LayoutService.MajorUpdateOccured -= LayoutServiceOnMajorUpdateOccured;
        _hotKeysContext?.Dispose();
        GC.SuppressFinalize(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await ApplyUserPreferences();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private async Task ApplyUserPreferences()
    {
        _defaultDarkMode = await _mudThemeProvider.GetSystemPreference();
        _userPreferences = await LayoutService.ApplyUserPreferences(_defaultDarkMode);
    }

    protected override void OnInitialized()
    {
        LayoutService.MajorUpdateOccured += LayoutServiceOnMajorUpdateOccured;
        LayoutService.SetBaseTheme(Theme.ApplicationTheme());
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        await LayoutService.OnSystemPreferenceChanged(newValue);
    }

    private void LayoutServiceOnMajorUpdateOccured(object? sender, EventArgs e)
    {
        StateHasChanged();
    }


     
}