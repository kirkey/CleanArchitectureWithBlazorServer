@using CleanArchitecture.Blazor.Server.UI.Services.Fusion
@using ActualLab.Fusion
@using ActualLab.Fusion.Blazor
@using ActualLab.Fusion.UI

@inherits ComputedStateComponent<UserInfo[]>
@inject IOnlineUserTracker OnlineUserTracker
@inject IStringLocalizer<ActiveUserSession> L
@inject UserProfileStateService UserProfileStateService
@if (State.HasValue && State.LastNonErrorValue.Any())
{
    <div class="d-flex flex-row gap-2 my-3 gap-2 my-3">
        @foreach (var user in State.LastNonErrorValue.OrderBy(u => u.Name != currentUserName))
        {
            <MudBadge Color="Color.Success" Overlap="false" Dot="true" Bordered="true">
                @if (string.IsNullOrEmpty(user.ProfilePictureDataUrl))
                {
                    <MudAvatar title="@user.Name">
                        @user.Name.First()
                    </MudAvatar>
                }
                else
                {
                    <MudAvatar title="@user.Name">
                        <MudImage Src="@user.ProfilePictureDataUrl"></MudImage>
                    </MudAvatar>
                }
            </MudBadge>
        }
    </div>
}
@if (State.Error is not null)
{
    <MudAlert Severity="Severity.Error">@State.Error.Message</MudAlert>
}


@code {

    private string sessionId = Guid.NewGuid().ToString();
    private string? currentUserName;
    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; } = default!;
    [Inject] private UIActionTracker UIActionTracker { get; init; } = null!;
    private TimeSpan UpdateDelay { get; set; } = TimeSpan.FromSeconds(5);
    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState;
        if (!string.IsNullOrEmpty(state.User.Identity?.Name))
        {
            await UserProfileStateService.InitializeAsync(state.User.Identity.Name);
            var userProfile = UserProfileStateService.UserProfile;
            currentUserName = userProfile.UserName;
            await OnlineUserTracker.Add(sessionId, new UserInfo(userProfile.UserId,
                userProfile.UserName,
                userProfile.Email,
                userProfile.DisplayName ?? string.Empty,
                userProfile.ProfilePictureDataUrl ?? string.Empty,
                userProfile.SuperiorName ?? string.Empty,
                userProfile.SuperiorId ?? string.Empty,
                userProfile.TenantId ?? string.Empty,
                userProfile.TenantName ?? string.Empty,
                userProfile.PhoneNumber,
                userProfile.AssignedRoles ?? Array.Empty<string>(),
                UserPresence.Available));
        }
    }

    protected override ComputedState<UserInfo[]>.Options GetStateOptions()
     => new() { UpdateDelayer = new UpdateDelayer(UIActionTracker, UpdateDelay) };

    protected override Task<UserInfo[]> ComputeState(CancellationToken cancellationToken)
    {
        return OnlineUserTracker.GetOnlineUsers(cancellationToken);
    }

    public override async ValueTask DisposeAsync()
    {
        await OnlineUserTracker.Remove(sessionId);
        GC.Collect();
    }
}
