//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// Command and handler for creating a new Bill.
// Uses caching invalidation and domain events for data consistency.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Bills.Caching;

namespace CleanArchitecture.Blazor.Application.Features.Bills.Commands.Create;

public class CreateBillCommand : ICacheInvalidatorRequest<Result<string>>
{
    [Description("Vendor Id")]
    public string? VendorID { get; set; }
    
    [Description("Bill Date")]
    public DateTime BillDate { get; set; } = DateTime.Now;
    
    [Description("Due Date")]
    public DateTime DueDate { get; set; }
    
    [Description("Total Amount")]
    public decimal TotalAmount { get; set; }
    
    [Description("Status")]
    public BillStatus Status { get; set; } = BillStatus.Open;

    public string CacheKey => BillCacheKey.GetAllCacheKey;
    public IEnumerable<string>? Tags => BillCacheKey.Tags;
    
    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<CreateBillCommand, Bill>(MemberList.None);
        }
    }
}

public class CreateBillCommandHandler : IRequestHandler<CreateBillCommand, Result<string>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;

    public CreateBillCommandHandler(
        IApplicationDbContextFactory dbContextFactory,
        IMapper mapper
    )
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
    }

    public async Task<Result<string>> Handle(CreateBillCommand request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        var item = _mapper.Map<Bill>(request);
        item.AddDomainEvent(new BillCreatedEvent(item));
        db.Bills.Add(item);
        await db.SaveChangesAsync(cancellationToken);
        return await Result<string>.SuccessAsync(item.Id);
    }
}
