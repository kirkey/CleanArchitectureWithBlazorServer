//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// Advanced filter and specification for Bill queries.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

namespace CleanArchitecture.Blazor.Application.Features.Bills.Specifications;

public enum BillListView
{
    [Description("All")]
    All,
    [Description("Open")]
    Open,
    [Description("Paid")]
    Paid,
    [Description("Overdue")]
    Overdue
}

public class BillAdvancedFilter : PaginationFilter
{
    public BillListView ListView { get; set; } = BillListView.All;
    public DateTime? StartDate { get; set; }
    public DateTime? EndDate { get; set; }
    public string? VendorID { get; set; }
    public BillStatus? Status { get; set; }
    public decimal? MinAmount { get; set; }
    public decimal? MaxAmount { get; set; }
}

public class BillAdvancedSpecification : Specification<Bill>
{
    public BillAdvancedSpecification(BillAdvancedFilter filter)
    {
        Query.Where(q => q.VendorId != null)
             .Where(filter.Keyword, !string.IsNullOrEmpty(filter.Keyword))
             .Where(q => q.VendorId == filter.VendorID, !string.IsNullOrEmpty(filter.VendorID))
             .Where(q => q.Status == filter.Status, filter.Status.HasValue)
             .Where(q => q.BillDate >= filter.StartDate, filter.StartDate.HasValue)
             .Where(q => q.BillDate <= filter.EndDate, filter.EndDate.HasValue)
             .Where(q => q.TotalAmount >= filter.MinAmount, filter.MinAmount.HasValue)
             .Where(q => q.TotalAmount <= filter.MaxAmount, filter.MaxAmount.HasValue);

        switch (filter.ListView)
        {
            case BillListView.All:
                break;
            case BillListView.Open:
                Query.Where(q => q.Status == BillStatus.Open);
                break;
            case BillListView.Paid:
                Query.Where(q => q.Status == BillStatus.Paid);
                break;
            case BillListView.Overdue:
                Query.Where(q => q.Status == BillStatus.Overdue);
                break;
        }
    }
}
