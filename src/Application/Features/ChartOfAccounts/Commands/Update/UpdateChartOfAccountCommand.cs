//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// UpdateChartOfAccountCommand & handler: updates an existing ChartOfAccount with cache invalidation and raises domain event.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.DTOs;
using CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.Caching;
using CleanArchitecture.Blazor.Domain.Entities;

namespace CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.Commands.Update;

public class UpdateChartOfAccountCommand : ICacheInvalidatorRequest<Result<string>>
{
    [Description("Id")]
    public string Id { get; set; } = string.Empty;
    [Description("Name")]
    public string Name { get; set; } = string.Empty;
    [Description("Description")]
    public string? Description { get; set; }
    [Description("Account Type")]
    public AccountType AccountType { get; set; }
    [Description("Sub Account Of")]
    public string? SubAccountOf { get; set; }
    [Description("Is Active")]
    public bool IsActive { get; set; } = true;

    public string CacheKey => ChartOfAccountCacheKey.GetAllCacheKey;
    public IEnumerable<string>? Tags => ChartOfAccountCacheKey.Tags;

    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<UpdateChartOfAccountCommand, ChartOfAccount>(MemberList.None);
            CreateMap<ChartOfAccountDto, UpdateChartOfAccountCommand>(MemberList.None);
        }
    }
}

public class UpdateChartOfAccountCommandHandler : IRequestHandler<UpdateChartOfAccountCommand, Result<string>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;
    public UpdateChartOfAccountCommandHandler(
        IApplicationDbContextFactory dbContextFactory,
        IMapper mapper
    )
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
    }
    public async Task<Result<string>> Handle(UpdateChartOfAccountCommand request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        var item = await db.ChartOfAccounts.FindAsync(request.Id, cancellationToken);
        if (item == null) return await Result<string>.FailureAsync("Chart of Account not found");
        _mapper.Map(request, item);
        await db.SaveChangesAsync(cancellationToken);
        return await Result<string>.SuccessAsync(item.Id);
    }
}

