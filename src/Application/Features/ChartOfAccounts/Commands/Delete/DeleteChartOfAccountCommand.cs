//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// Command and handler for deleting Chart of Account entities.
// Implements cache invalidation and triggers domain events.
// </auto-generated>
//------------------------------------------------------------------------------

using CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.Caching;
using CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.Caching;
using CleanArchitecture.Blazor.Domain.Entities;
using CleanArchitecture.Blazor.Domain.Events;

namespace CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.Commands.Delete;

public class DeleteChartOfAccountCommand : ICacheInvalidatorRequest<Result>
{
    public string[] Id { get; }
    public string CacheKey => ChartOfAccountCacheKey.GetAllCacheKey;
    public IEnumerable<string>? Tags => ChartOfAccountCacheKey.Tags;

    public DeleteChartOfAccountCommand(string[] id)
    {
        Id = id;
    }
}

public class DeleteChartOfAccountCommandHandler :
             IRequestHandler<DeleteChartOfAccountCommand, Result>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;

    public DeleteChartOfAccountCommandHandler(
        IApplicationDbContextFactory dbContextFactory
    )
    {
        _dbContextFactory = dbContextFactory;
    }

    public async Task<Result> Handle(DeleteChartOfAccountCommand request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        var items = await db.ChartOfAccounts.Where(x => request.Id.Contains(x.Id)).ToListAsync(cancellationToken);
        foreach (var item in items)
        {
            item.AddDomainEvent(new DeletedEvent<ChartOfAccount>(item));
            db.ChartOfAccounts.Remove(item);
        }
        await db.SaveChangesAsync(cancellationToken);
        return await Result.SuccessAsync();
    }
}

