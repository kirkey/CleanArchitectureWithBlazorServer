//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// Query to export chart of accounts to Excel file, with advanced filtering and localization.
// </auto-generated>
//------------------------------------------------------------------------------
using CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.DTOs;
using CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.Caching;
using CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.Queries.Export;

public class ExportChartOfAccountsQuery : ChartOfAccountAdvancedFilter, ICacheableRequest<Result<byte[]>>
{
    public ChartOfAccountAdvancedSpecification Specification => new ChartOfAccountAdvancedSpecification(this);
    public IEnumerable<string>? Tags => ChartOfAccountCacheKey.Tags;
    public override string ToString()
    {
        return $"Listview:{ListView}:{CurrentUser?.UserId}, Search:{Keyword}, {OrderBy}, {SortDirection}";
    }
    public string CacheKey => ChartOfAccountCacheKey.GetExportCacheKey($"{this}");
}

public class ExportChartOfAccountsQueryHandler :
    IRequestHandler<ExportChartOfAccountsQuery, Result<byte[]>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;
    private readonly IExcelService _excelService;
    private readonly IStringLocalizer<ExportChartOfAccountsQueryHandler> _localizer;
    private readonly ChartOfAccountDto _dto = new();
    public ExportChartOfAccountsQueryHandler(
        IApplicationDbContextFactory dbContextFactory,
        IMapper mapper,
        IExcelService excelService,
        IStringLocalizer<ExportChartOfAccountsQueryHandler> localizer)
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
        _excelService = excelService;
        _localizer = localizer;
    }
    public async Task<Result<byte[]>> Handle(ExportChartOfAccountsQuery request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        var data = await db.ChartOfAccounts.ApplySpecification(request.Specification)
            .OrderBy($"{request.OrderBy} {request.SortDirection}")
            .ProjectTo<ChartOfAccountDto>(_mapper.ConfigurationProvider)
            .AsNoTracking()
            .ToListAsync(cancellationToken);
        var result = await _excelService.ExportAsync(data,
            new Dictionary<string, Func<ChartOfAccountDto, object?>>()
            {
                {_localizer[_dto.GetMemberDescription(x=>x.Name)], item => item.Name},
                {_localizer[_dto.GetMemberDescription(x=>x.Description)], item => item.Description},
                {_localizer[_dto.GetMemberDescription(x=>x.AccountType)], item => item.AccountType},
                {_localizer[_dto.GetMemberDescription(x=>x.SubAccountOf)], item => item.SubAccountOf},
                {_localizer[_dto.GetMemberDescription(x=>x.IsActive)], item => item.IsActive},
            },
            _localizer[_dto.GetClassDescription()]);
        return await Result<byte[]>.SuccessAsync(result);
    }
}

