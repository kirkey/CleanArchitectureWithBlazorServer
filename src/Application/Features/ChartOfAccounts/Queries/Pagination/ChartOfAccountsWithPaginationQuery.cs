//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// Query for retrieving chart of accounts with pagination and filtering options. Cached for performance.
// </auto-generated>
//------------------------------------------------------------------------------
using CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.DTOs;
using CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.Caching;
using CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.ChartOfAccounts.Queries.Pagination;

public class ChartOfAccountsWithPaginationQuery : ChartOfAccountAdvancedFilter, ICacheableRequest<PaginatedData<ChartOfAccountDto>>
{
    public override string ToString()
    {
        return $"Listview:{ListView}:{CurrentUser?.UserId}, Search:{Keyword}, {OrderBy}, {SortDirection}, {PageNumber}, {PageSize}";
    }
    public string CacheKey => ChartOfAccountCacheKey.GetPaginationCacheKey($"{this}");
    public IEnumerable<string>? Tags => ChartOfAccountCacheKey.Tags;
    public ChartOfAccountAdvancedSpecification Specification => new ChartOfAccountAdvancedSpecification(this);
}

public class ChartOfAccountsWithPaginationQueryHandler :
    IRequestHandler<ChartOfAccountsWithPaginationQuery, PaginatedData<ChartOfAccountDto>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;
    public ChartOfAccountsWithPaginationQueryHandler(
        IApplicationDbContextFactory dbContextFactory,
        IMapper mapper)
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
    }

    public async Task<PaginatedData<ChartOfAccountDto>> Handle(ChartOfAccountsWithPaginationQuery request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        var data = await db.ChartOfAccounts.OrderBy($"{request.OrderBy} {request.SortDirection}")
            .ProjectToPaginatedDataAsync<ChartOfAccount, ChartOfAccountDto>(request.Specification, request.PageNumber, request.PageSize, _mapper.ConfigurationProvider, cancellationToken);
        return data;
    }
}

