//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// Advanced filter and specification for Payment queries.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

namespace CleanArchitecture.Blazor.Application.Features.Payments.Specifications;

public enum PaymentListView
{
    [Description("All")]
    All,
    [Description("Cash")]
    Cash,
    [Description("Credit Card")]
    CreditCard,
    [Description("Bank Transfer")]
    BankTransfer
}

public class PaymentAdvancedFilter : PaginationFilter
{
    public PaymentListView ListView { get; set; } = PaymentListView.All;
    public DateTime? StartDate { get; set; }
    public DateTime? EndDate { get; set; }
    public string? CustomerID { get; set; }
    public PaymentMethod? PaymentMethod { get; set; }
    public decimal? MinAmount { get; set; }
    public decimal? MaxAmount { get; set; }
}

public class PaymentAdvancedSpecification : Specification<Payment>
{
    public PaymentAdvancedSpecification(PaymentAdvancedFilter filter)
    {
        Query.Where(q => q.CustomerID != null)
             .Where(filter.Keyword, !string.IsNullOrEmpty(filter.Keyword))
             .Where(q => q.CustomerID == filter.CustomerID, !string.IsNullOrEmpty(filter.CustomerID))
             .Where(q => q.PaymentMethod == filter.PaymentMethod, filter.PaymentMethod.HasValue)
             .Where(q => q.PaymentDate >= filter.StartDate, filter.StartDate.HasValue)
             .Where(q => q.PaymentDate <= filter.EndDate, filter.EndDate.HasValue)
             .Where(q => q.Amount >= filter.MinAmount, filter.MinAmount.HasValue)
             .Where(q => q.Amount <= filter.MaxAmount, filter.MaxAmount.HasValue);

        switch (filter.ListView)
        {
            case PaymentListView.All:
                break;
            case PaymentListView.Cash:
                Query.Where(q => q.PaymentMethod == PaymentMethod.Cash);
                break;
            case PaymentListView.CreditCard:
                Query.Where(q => q.PaymentMethod == PaymentMethod.CreditCard);
                break;
            case PaymentListView.BankTransfer:
                Query.Where(q => q.PaymentMethod == PaymentMethod.BankTransfer);
                break;
        }
    }
}
