//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// Advanced filter and specification for BillItem queries.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

namespace CleanArchitecture.Blazor.Application.Features.BillItems.Specifications;

public enum BillItemListView
{
    [Description("All")]
    All,
    [Description("High Value")]
    HighValue,
    [Description("Low Value")]
    LowValue
}

public class BillItemAdvancedFilter : PaginationFilter
{
    public BillItemListView ListView { get; set; } = BillItemListView.All;
    public string? BillID { get; set; }
    public decimal? MinUnitPrice { get; set; }
    public decimal? MaxUnitPrice { get; set; }
    public int? MinQuantity { get; set; }
    public int? MaxQuantity { get; set; }
}

public class BillItemAdvancedSpecification : Specification<BillItem>
{
    public BillItemAdvancedSpecification(BillItemAdvancedFilter filter)
    {
        Query.Where(q => q.ItemName != null)
             .Where(filter.Keyword, !string.IsNullOrEmpty(filter.Keyword))
             .Where(q => q.BillID == filter.BillID, !string.IsNullOrEmpty(filter.BillID))
             .Where(q => q.UnitPrice >= filter.MinUnitPrice, filter.MinUnitPrice.HasValue)
             .Where(q => q.UnitPrice <= filter.MaxUnitPrice, filter.MaxUnitPrice.HasValue)
             .Where(q => q.Quantity >= filter.MinQuantity, filter.MinQuantity.HasValue)
             .Where(q => q.Quantity <= filter.MaxQuantity, filter.MaxQuantity.HasValue);

        switch (filter.ListView)
        {
            case BillItemListView.All:
                break;
            case BillItemListView.HighValue:
                Query.Where(q => q.LineTotal > 1000);
                break;
            case BillItemListView.LowValue:
                Query.Where(q => q.LineTotal <= 100);
                break;
        }
    }
}
