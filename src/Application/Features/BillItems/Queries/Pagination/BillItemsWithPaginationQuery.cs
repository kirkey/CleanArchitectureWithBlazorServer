//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// Query for getting BillItems with pagination.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.BillItems.DTOs;
using CleanArchitecture.Blazor.Application.Features.BillItems.Caching;
using CleanArchitecture.Blazor.Application.Features.BillItems.Specifications;
using Microsoft.Extensions.Caching.Memory;

namespace CleanArchitecture.Blazor.Application.Features.BillItems.Queries.Pagination;

public class BillItemsWithPaginationQuery : BillItemAdvancedFilter, ICacheableRequest<PaginatedData<BillItemDto>>
{
    public override string ToString()
    {
        return $"Listview:{ListView}, Search:{Keyword}, {OrderBy}, {SortDirection}, {PageNumber}, {PageSize}";
    }

    public string CacheKey => BillItemCacheKey.GetPaginationCacheKey($"{this}");
    public IEnumerable<string>? Tags { get; }

    public MemoryCacheEntryOptions? Options => new MemoryCacheEntryOptions
    {
        AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(1)
    };
    
    public BillItemAdvancedSpecification Specification => new(this);
}

public class BillItemsWithPaginationQueryHandler : IRequestHandler<BillItemsWithPaginationQuery, PaginatedData<BillItemDto>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;

    public BillItemsWithPaginationQueryHandler(
        IApplicationDbContextFactory dbContextFactory,
        IMapper mapper
    )
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
    }

    public async Task<PaginatedData<BillItemDto>> Handle(BillItemsWithPaginationQuery request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        var data = await db.BillItems.OrderBy($"{request.OrderBy} {request.SortDirection}")
            .ProjectToPaginatedDataAsync<BillItem, BillItemDto>(request.Specification, request.PageNumber, request.PageSize, _mapper.ConfigurationProvider, cancellationToken);
        return data;
    }
}
