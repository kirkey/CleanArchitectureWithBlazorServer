//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// Query for getting all BillItems.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.BillItems.DTOs;
using CleanArchitecture.Blazor.Application.Features.BillItems.Caching;
using Microsoft.Extensions.Caching.Memory;

namespace CleanArchitecture.Blazor.Application.Features.BillItems.Queries.GetAll;

public class GetAllBillItemsQuery : ICacheableRequest<IEnumerable<BillItemDto>>
{
    public string CacheKey => BillItemCacheKey.GetAllCacheKey;
    public IEnumerable<string>? Tags { get; }

    public MemoryCacheEntryOptions? Options => new MemoryCacheEntryOptions
    {
        AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(30)
    };
}

public class GetAllBillItemsQueryHandler : IRequestHandler<GetAllBillItemsQuery, IEnumerable<BillItemDto>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;

    public GetAllBillItemsQueryHandler(
        IApplicationDbContextFactory dbContextFactory,
        IMapper mapper
    )
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
    }

    public async Task<IEnumerable<BillItemDto>> Handle(GetAllBillItemsQuery request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        var data = await db.BillItems
            .OrderBy(x => x.Name)
            .ToListAsync(cancellationToken);
        return _mapper.Map<List<BillItemDto>>(data);
    }
}
