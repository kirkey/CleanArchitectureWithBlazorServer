//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-08-04
//     Last Modified: 2025-08-04
//     Description: 
//       Defines a query to export invoice data to an Excel file. This query 
//       applies advanced filtering options and generates an Excel file with 
//       the specified invoice details.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Invoices.DTOs;
using CleanArchitecture.Blazor.Application.Features.Invoices.Caching;
using CleanArchitecture.Blazor.Application.Features.Invoices.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.Invoices.Queries.Export;

public class ExportInvoicesQuery : InvoiceAdvancedFilter, ICacheableRequest<Result<byte[]>>
{
    public InvoiceAdvancedSpecification Specification => new InvoiceAdvancedSpecification(this);
    public IEnumerable<string>? Tags => InvoiceCacheKey.Tags;

    public override string ToString()
    {
        return $"Search:{Keyword}, {OrderBy}, {SortDirection}";
    }

    public string CacheKey => InvoiceCacheKey.GetExportCacheKey($"{this}");
}

public class ExportInvoicesQueryHandler : IRequestHandler<ExportInvoicesQuery, Result<byte[]>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;
    private readonly IExcelService _excelService;
    private readonly IStringLocalizer<ExportInvoicesQueryHandler> _localizer;
    private readonly InvoiceDto _dto = new();

    public ExportInvoicesQueryHandler(
        IApplicationDbContextFactory dbContextFactory,
        IMapper mapper,
        IExcelService excelService,
        IStringLocalizer<ExportInvoicesQueryHandler> localizer)
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
        _excelService = excelService;
        _localizer = localizer;
    }

    public async Task<Result<byte[]>> Handle(ExportInvoicesQuery request, CancellationToken cancellationToken)
    {
        await using var context = await _dbContextFactory.CreateAsync(cancellationToken);
        var data = await context.Invoices.ApplySpecification(request.Specification)
            .OrderBy($"{request.OrderBy} {request.SortDirection}")
            .ProjectTo<InvoiceDto>(_mapper.ConfigurationProvider)
            .AsNoTracking()
            .ToListAsync(cancellationToken);

        var result = await _excelService.ExportAsync(data,
            new Dictionary<string, Func<InvoiceDto, object?>>()
            {
                { _localizer[_dto.GetMemberDescription(x => x.CustomerId)], item => item.CustomerId },
                { _localizer[_dto.GetMemberDescription(x => x.InvoiceDate)], item => item.InvoiceDate },
                { _localizer[_dto.GetMemberDescription(x => x.DueDate)], item => item.DueDate },
                { _localizer[_dto.GetMemberDescription(x => x.TotalAmount)], item => item.TotalAmount },
                { _localizer[_dto.GetMemberDescription(x => x.Status)], item => item.Status }
            }, _localizer["Invoices"]);

        return await Result<byte[]>.SuccessAsync(result);
    }
}
