//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// Command and handler for creating a new Invoice.
// Uses caching invalidation and domain events for data consistency.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Invoices.Caching;

namespace CleanArchitecture.Blazor.Application.Features.Invoices.Commands.Create;

public class CreateInvoiceCommand : ICacheInvalidatorRequest<Result<string>>
{
    [Description("Customer Id")]
    public string? CustomerID { get; set; }
    
    [Description("Invoice Date")]
    public DateTime InvoiceDate { get; set; } = DateTime.Now;
    
    [Description("Due Date")]
    public DateTime DueDate { get; set; }
    
    [Description("Total Amount")]
    public decimal TotalAmount { get; set; }
    
    [Description("Status")]
    public InvoiceStatus Status { get; set; } = InvoiceStatus.Open;

    public string CacheKey => InvoiceCacheKey.GetAllCacheKey;
    public IEnumerable<string>? Tags => InvoiceCacheKey.Tags;
    
    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<CreateInvoiceCommand, Invoice>(MemberList.None);
        }
    }
}

public class CreateInvoiceCommandHandler : IRequestHandler<CreateInvoiceCommand, Result<string>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;

    public CreateInvoiceCommandHandler(
        IApplicationDbContextFactory dbContextFactory,
        IMapper mapper
    )
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
    }

    public async Task<Result<string>> Handle(CreateInvoiceCommand request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        var item = _mapper.Map<Invoice>(request);
        item.AddDomainEvent(new InvoiceCreatedEvent(item));
        db.Invoices.Add(item);
        await db.SaveChangesAsync(cancellationToken);
        return await Result<string>.SuccessAsync(item.Id);
    }
}
