//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// Command and handler for deleting Invoice(s).
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Invoices.Caching;

namespace CleanArchitecture.Blazor.Application.Features.Invoices.Commands.Delete;

public class DeleteInvoiceCommand : ICacheInvalidatorRequest<Result<string>>
{
    public string[] Ids { get; set; } = Array.Empty<string>();
    public string CacheKey => InvoiceCacheKey.GetAllCacheKey;
    public IEnumerable<string>? Tags => InvoiceCacheKey.Tags;
}

public class DeleteInvoiceCommandHandler : IRequestHandler<DeleteInvoiceCommand, Result<string>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;

    public DeleteInvoiceCommandHandler(IApplicationDbContextFactory dbContextFactory)
    {
        _dbContextFactory = dbContextFactory;
    }

    public async Task<Result<string>> Handle(DeleteInvoiceCommand request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        var items = await db.Invoices.Where(x => request.Ids.Contains(x.Id)).ToListAsync(cancellationToken);
        foreach (var item in items)
        {
            item.AddDomainEvent(new InvoiceDeletedEvent(item));
            db.Invoices.Remove(item);
        }
        var result = await db.SaveChangesAsync(cancellationToken);
        return await Result<string>.SuccessAsync($"Deleted {result} invoices.");
    }
}
