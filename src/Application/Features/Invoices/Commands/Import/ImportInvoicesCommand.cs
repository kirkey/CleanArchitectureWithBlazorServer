//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// Import command & template for invoices.
// Validates Excel data, prevents duplicates, and provides a template for bulk entry.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Invoices.DTOs;
using CleanArchitecture.Blazor.Application.Features.Invoices.Caching;

namespace CleanArchitecture.Blazor.Application.Features.Invoices.Commands.Import;

public class ImportInvoicesCommand : ICacheInvalidatorRequest<Result<int>>
{
    public string FileName { get; set; }
    public byte[] Data { get; set; }
    public string CacheKey => InvoiceCacheKey.GetAllCacheKey;
    public IEnumerable<string>? Tags => InvoiceCacheKey.Tags;
    
    public ImportInvoicesCommand(string fileName, byte[] data)
    {
        FileName = fileName;
        Data = data;
    }
}

public record class CreateInvoicesTemplateCommand : IRequest<Result<byte[]>>
{
}

public class ImportInvoicesCommandHandler :
    IRequestHandler<CreateInvoicesTemplateCommand, Result<byte[]>>,
    IRequestHandler<ImportInvoicesCommand, Result<int>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IStringLocalizer<ImportInvoicesCommandHandler> _localizer;
    private readonly IExcelService _excelService;
    private readonly InvoiceDto _dto = new();
    private readonly IMapper _mapper;

    public ImportInvoicesCommandHandler(
        IApplicationDbContextFactory dbContextFactory,
        IMapper mapper,
        IExcelService excelService,
        IStringLocalizer<ImportInvoicesCommandHandler> localizer)
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
        _excelService = excelService;
        _localizer = localizer;
    }

    public async Task<Result<byte[]>> Handle(CreateInvoicesTemplateCommand request, CancellationToken cancellationToken)
    {
        var fields = new string[]
        {
            _localizer[_dto.GetMemberDescription(x => x.CustomerId)],
            _localizer[_dto.GetMemberDescription(x => x.InvoiceDate)],
            _localizer[_dto.GetMemberDescription(x => x.DueDate)],
            _localizer[_dto.GetMemberDescription(x => x.TotalAmount)],
            _localizer[_dto.GetMemberDescription(x => x.Status)]
        };
        var result = await _excelService.CreateTemplateAsync(fields, _localizer[_dto.GetClassDescription()]);
        return await Result<byte[]>.SuccessAsync(result);
    }

#nullable disable warnings
    public async Task<Result<int>> Handle(ImportInvoicesCommand request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        var result = await _excelService.ImportAsync(request.Data, mappers: new Dictionary<string, Func<DataRow, InvoiceDto, object?>>
        {
            { _localizer[_dto.GetMemberDescription(x => x.CustomerId)], (row, item) => item.CustomerId = row[_localizer[_dto.GetMemberDescription(x => x.CustomerId)]].ToString() },
            { _localizer[_dto.GetMemberDescription(x => x.InvoiceDate)], (row, item) => item.InvoiceDate = Convert.ToDateTime(row[_localizer[_dto.GetMemberDescription(x => x.InvoiceDate)]]) },
            { _localizer[_dto.GetMemberDescription(x => x.DueDate)], (row, item) => item.DueDate = Convert.ToDateTime(row[_localizer[_dto.GetMemberDescription(x => x.DueDate)]]) },
            { _localizer[_dto.GetMemberDescription(x => x.TotalAmount)], (row, item) => item.TotalAmount = Convert.ToDecimal(row[_localizer[_dto.GetMemberDescription(x => x.TotalAmount)]]) },
            { _localizer[_dto.GetMemberDescription(x => x.Status)], (row, item) => item.Status = Enum.Parse<InvoiceStatus>(row[_localizer[_dto.GetMemberDescription(x => x.Status)]].ToString()) }
        }, _localizer[_dto.GetClassDescription()]);

        if (result.Succeeded && result.Data is not null)
        {
            foreach (var dto in result.Data)
            {
                var exists = await db.Invoices.AnyAsync(x => x.CustomerId == dto.CustomerId && x.InvoiceDate == dto.InvoiceDate && x.TotalAmount == dto.TotalAmount, cancellationToken);
                if (!exists)
                {
                    var item = _mapper.Map<Invoice>(dto);
                    // add create domain events if this entity implement the IHasDomainEvent interface
                    // item.AddDomainEvent(new InvoiceCreatedEvent(item));
                    await db.Invoices.AddAsync(item, cancellationToken);
                }
            }
            await db.SaveChangesAsync(cancellationToken);
            return await Result<int>.SuccessAsync(result.Data.Count());
        }
        else
        {
            return await Result<int>.FailureAsync(result.Errors);
        }
    }
}
