//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// Command and handler for creating a new Vendor.
// Uses caching invalidation and domain events for data consistency.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Vendors.Caching;

namespace CleanArchitecture.Blazor.Application.Features.Vendors.Commands.Create;

public class CreateVendorCommand : ICacheInvalidatorRequest<Result<string>>
{
    [Description("Vendor Name")]
    public string Name { get; set; } = string.Empty;
    
    [Description("Billing Address")]
    public string? BillingAddress { get; set; }
    
    [Description("Contact Person")]
    public string? ContactPerson { get; set; }
    
    [Description("Email")]
    public string? Email { get; set; }
    
    [Description("Terms")]
    public string? Terms { get; set; }

    public string CacheKey => VendorCacheKey.GetAllCacheKey;
    public IEnumerable<string>? Tags => VendorCacheKey.Tags;
    
    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<CreateVendorCommand, Vendor>(MemberList.None)
                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name));
        }
    }
}

public class CreateVendorCommandHandler : IRequestHandler<CreateVendorCommand, Result<string>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;

    public CreateVendorCommandHandler(
        IApplicationDbContextFactory dbContextFactory,
        IMapper mapper
    )
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
    }

    public async Task<Result<string>> Handle(CreateVendorCommand request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        var item = _mapper.Map<Vendor>(request);
        item.AddDomainEvent(new VendorCreatedEvent(item));
        db.Vendors.Add(item);
        await db.SaveChangesAsync(cancellationToken);
        return await Result<string>.SuccessAsync(item.Id);
    }
}
