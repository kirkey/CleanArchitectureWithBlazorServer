//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// Command for adding/editing a customer entity with validation, mapping,
// domain events, and cache invalidation.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Customers.Caching;
using CleanArchitecture.Blazor.Application.Features.Customers.DTOs;

namespace CleanArchitecture.Blazor.Application.Features.Customers.Commands.AddEdit;

public class AddEditCustomerCommand : ICacheInvalidatorRequest<Result<string>>
{
    [Description("Id")]
    public string? Id { get; set; }
    [Description("Name")]
    public string? Name { get; set; }
    [Description("Description")]
    public string? Description { get; set; }
    [Description("Email")]
    public string? Email { get; set; }
    [Description("Phone Number")]
    public string? PhoneNumber { get; set; }
    [Description("Country")]
    public string? Country { get; set; }

    public string CacheKey => CustomerCacheKey.GetAllCacheKey;
    public IEnumerable<string>? Tags => CustomerCacheKey.Tags;

    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<CustomerDto, AddEditCustomerCommand>(MemberList.None);
            CreateMap<AddEditCustomerCommand, Customer>(MemberList.None);
        }
    }
}

public class AddEditCustomerCommandHandler : IRequestHandler<AddEditCustomerCommand, Result<string>>
{
    private readonly IMapper _mapper;
    private readonly IApplicationDbContextFactory _dbContextFactory;

    public AddEditCustomerCommandHandler(
        IMapper mapper,
        IApplicationDbContextFactory dbContextFactory)
    {
        _mapper = mapper;
        _dbContextFactory = dbContextFactory;
    }

    public async Task<Result<string>> Handle(AddEditCustomerCommand request, CancellationToken cancellationToken)
    {
        await using var context = await _dbContextFactory.CreateAsync(cancellationToken);
        if (request.Id is not null)
        {
            var item = await context.Customers.FindAsync([request.Id], cancellationToken);
            if (item is null)
            {
                return await Result<string>.FailureAsync($"Customer with id: [{request.Id}] not found.");
            }
            item = _mapper.Map(request, item);
            await context.SaveChangesAsync(cancellationToken);
            return await Result<string>.SuccessAsync(item.Id);
        }
        else
        {
            var item = _mapper.Map<Customer>(request);
            
            context.Customers.Add(item);
            await context.SaveChangesAsync(cancellationToken);
            return await Result<string>.SuccessAsync(item.Id);
        }
    }
}
