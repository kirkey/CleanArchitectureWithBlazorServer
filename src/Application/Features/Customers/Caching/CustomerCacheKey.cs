//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-08-04
//     Last Modified: 2025-08-04
//     Description: 
//       Defines static methods and properties for managing cache keys and expiration 
//       settings for Customer-related data.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

namespace CleanArchitecture.Blazor.Application.Features.Customers.Caching;

/// <summary>
/// Static class for managing cache keys and expiration for Customer-related data.
/// </summary>
public static class CustomerCacheKey
{
    public const string GetAllCacheKey = "all-Customers";
    public static string GetPaginationCacheKey(string parameters) {
        return $"CustomerCacheKey:CustomersWithPaginationQuery,{parameters}";
    }
    public static string GetExportCacheKey(string parameters) {
        return $"CustomerCacheKey:ExportCustomersQuery,{parameters}";
    }
    public static string GetByIdCacheKey(string id) {
        return $"CustomerCacheKey:GetByIdCacheKey,{id}";
    }
    public static string GetByNameCacheKey(string name) {
        return $"CustomerCacheKey:GetByNameCacheKey,{name}";
    }
    public static IEnumerable<string>? Tags => new string[] { "customer" };

    private static readonly object _tokenLock = new object();
    private static CancellationTokenSource _tokenSource = new CancellationTokenSource();

    public static CancellationToken GetOrCreateToken()
    {
        lock (_tokenLock)
        {
            if (_tokenSource.Token.IsCancellationRequested)
            {
                _tokenSource = new CancellationTokenSource();
            }
            return _tokenSource.Token;
        }
    }

    public static void Refresh()
    {
        lock (_tokenLock)
        {
            if (!_tokenSource.Token.IsCancellationRequested)
            {
                _tokenSource.Cancel();
            }
        }
    }
}
