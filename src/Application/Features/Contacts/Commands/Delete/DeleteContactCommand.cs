//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under one or more agreements.
//     The .NET Foundation licenses this file to you under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2024-11-08
//     Last Modified: 2024-11-08
//     Description: 
//       This file defines the command and its handler for deleting one or more
//       Contact entities from the CleanArchitecture.Blazor application. It
//       implements caching invalidation logic to ensure that data consistency is
//       maintained. Domain events are triggered for deleted entities to support 
//       integration with other parts of the system.
//       for separation of concerns and encapsulation.
//     
//     Documentation:
//       https://docs.cleanarchitectureblazor.com/features/contact
// </auto-generated>
//------------------------------------------------------------------------------

// Usage:
// This command can be used to delete multiple Contacts from the system by specifying
// their IDs. The handler also raises domain events for each deleted contact to
// notify other bounded contexts and invalidate relevant cache entries.

using CleanArchitecture.Blazor.Application.Features.Contacts.Caching;


namespace CleanArchitecture.Blazor.Application.Features.Contacts.Commands.Delete;

public class DeleteContactCommand:  ICacheInvalidatorRequest<Result<int>>
{
  public int[] Id {  get; }
  public string CacheKey => ContactCacheKey.GetAllCacheKey;
  public CancellationTokenSource? SharedExpiryTokenSource => ContactCacheKey.GetOrCreateTokenSource();
  public DeleteContactCommand(int[] id)
  {
    Id = id;
  }
}

public class DeleteContactCommandHandler : 
             IRequestHandler<DeleteContactCommand, Result<int>>

{
    private readonly IApplicationDbContext _context;
    public DeleteContactCommandHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }
    public async Task<Result<int>> Handle(DeleteContactCommand request, CancellationToken cancellationToken)
    {
        var items = await _context.Contacts.Where(x=>request.Id.Contains(x.Id)).ToListAsync(cancellationToken);
        foreach (var item in items)
        {
		    // raise a delete domain event
			item.AddDomainEvent(new ContactDeletedEvent(item));
            _context.Contacts.Remove(item);
        }
        var result = await _context.SaveChangesAsync(cancellationToken);
        return await Result<int>.SuccessAsync(result);
    }

}

