//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// Event handlers for JournalEntry domain events.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CleanArchitecture.Blazor.Application.Features.JournalEntries.EventHandlers;

public class JournalEntryCreatedEventHandler : INotificationHandler<JournalEntryCreatedEvent>
{
    private readonly ILogger<JournalEntryCreatedEventHandler> _logger;

    public JournalEntryCreatedEventHandler(
        ILogger<JournalEntryCreatedEventHandler> logger
        )
    {
        _logger = logger;
    }
    
    public Task Handle(JournalEntryCreatedEvent notification, CancellationToken cancellationToken)
    {
        _logger.LogInformation("Handled domain event '{EventType}' with notification: {@Notification} ", notification.GetType().Name, notification);
        return Task.CompletedTask;
    }
}

public class JournalEntryUpdatedEventHandler : INotificationHandler<JournalEntryUpdatedEvent>
{
    private readonly ILogger<JournalEntryUpdatedEventHandler> _logger;

    public JournalEntryUpdatedEventHandler(
        ILogger<JournalEntryUpdatedEventHandler> logger
        )
    {
        _logger = logger;
    }
    
    public Task Handle(JournalEntryUpdatedEvent notification, CancellationToken cancellationToken)
    {
        _logger.LogInformation("Handled domain event '{EventType}' with notification: {@Notification} ", notification.GetType().Name, notification);
        return Task.CompletedTask;
    }
}

public class JournalEntryDeletedEventHandler : INotificationHandler<JournalEntryDeletedEvent>
{
    private readonly ILogger<JournalEntryDeletedEventHandler> _logger;

    public JournalEntryDeletedEventHandler(
        ILogger<JournalEntryDeletedEventHandler> logger
        )
    {
        _logger = logger;
    }
    
    public Task Handle(JournalEntryDeletedEvent notification, CancellationToken cancellationToken)
    {
        _logger.LogInformation("Handled domain event '{EventType}' with notification: {@Notification} ", notification.GetType().Name, notification);
        return Task.CompletedTask;
    }
}
