//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// Advanced filter and specification for JournalEntry queries.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

namespace CleanArchitecture.Blazor.Application.Features.JournalEntries.Specifications;

public enum JournalEntryListView
{
    [Description("All")]
    All,
    [Description("Posted")]
    Posted,
    [Description("Unposted")]
    Unposted
}

public class JournalEntryAdvancedFilter : PaginationFilter
{
    public JournalEntryListView ListView { get; set; } = JournalEntryListView.All;
    public DateTime? StartDate { get; set; }
    public DateTime? EndDate { get; set; }
    public string? Source { get; set; }
    public bool? IsPosted { get; set; }
}

public class JournalEntryAdvancedSpecification : Specification<JournalEntry>
{
    public JournalEntryAdvancedSpecification(JournalEntryAdvancedFilter filter)
    {
        Query.Where(q => q.Description != null)
             .Where(filter.Keyword, !string.IsNullOrEmpty(filter.Keyword))
             .Where(q => q.Source == filter.Source, !string.IsNullOrEmpty(filter.Source))
             .Where(q => q.IsPosted == filter.IsPosted, filter.IsPosted.HasValue)
             .Where(q => q.Date >= filter.StartDate, filter.StartDate.HasValue)
             .Where(q => q.Date <= filter.EndDate, filter.EndDate.HasValue);

        switch (filter.ListView)
        {
            case JournalEntryListView.All:
                break;
            case JournalEntryListView.Posted:
                Query.Where(q => q.IsPosted == true);
                break;
            case JournalEntryListView.Unposted:
                Query.Where(q => q.IsPosted == false);
                break;
        }
    }
}
