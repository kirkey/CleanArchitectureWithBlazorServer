//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// Command and handler for creating a new JournalEntry.
// Uses caching invalidation and domain events for data consistency.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.JournalEntries.Caching;

namespace CleanArchitecture.Blazor.Application.Features.JournalEntries.Commands.Create;

public class CreateJournalEntryCommand : ICacheInvalidatorRequest<Result<string>>
{
    [Description("Date")]
    public DateTime Date { get; set; } = DateTime.Now;
    
    [Description("Reference Number")]
    public string? ReferenceNumber { get; set; }
    
    [Description("Description")]
    public string? Description { get; set; }
    
    [Description("Source")]
    public string? Source { get; set; }
    
    [Description("Is Posted")]
    public bool IsPosted { get; set; } = false;

    public string CacheKey => JournalEntryCacheKey.GetAllCacheKey;
    public IEnumerable<string>? Tags => JournalEntryCacheKey.Tags;
    
    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<CreateJournalEntryCommand, JournalEntry>(MemberList.None);
        }
    }
}

public class CreateJournalEntryCommandHandler : IRequestHandler<CreateJournalEntryCommand, Result<string>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;

    public CreateJournalEntryCommandHandler(
        IApplicationDbContextFactory dbContextFactory,
        IMapper mapper
    )
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
    }

    public async Task<Result<string>> Handle(CreateJournalEntryCommand request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        var item = _mapper.Map<JournalEntry>(request);
        item.AddDomainEvent(new JournalEntryCreatedEvent(item));
        db.JournalEntries.Add(item);
        await db.SaveChangesAsync(cancellationToken);
        return await Result<string>.SuccessAsync(item.Id);
    }
}
