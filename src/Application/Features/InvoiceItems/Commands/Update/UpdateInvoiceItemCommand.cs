//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// Command and handler for updating an InvoiceItem.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.InvoiceItems.Caching;

namespace CleanArchitecture.Blazor.Application.Features.InvoiceItems.Commands.Update;

public class UpdateInvoiceItemCommand : ICacheInvalidatorRequest<Result<string>>
{
    [Description("Id")]
    public string Id { get; set; } = string.Empty;
    
    [Description("Invoice ID")]
    public string? InvoiceID { get; set; }
    
    [Description("Item Name")]
    public string? ItemName { get; set; }
    
    [Description("Quantity")]
    public int Quantity { get; set; }
    
    [Description("Unit Price")]
    public decimal UnitPrice { get; set; }
    
    [Description("Line Total")]
    public decimal LineTotal { get; set; }

    public string CacheKey => InvoiceItemCacheKey.GetAllCacheKey;
    public IEnumerable<string>? Tags => InvoiceItemCacheKey.Tags;
    
    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<UpdateInvoiceItemCommand, InvoiceItem>(MemberList.None);
        }
    }
}

public class UpdateInvoiceItemCommandHandler : IRequestHandler<UpdateInvoiceItemCommand, Result<string>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;

    public UpdateInvoiceItemCommandHandler(
        IApplicationDbContextFactory dbContextFactory,
        IMapper mapper
    )
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
    }

    public async Task<Result<string>> Handle(UpdateInvoiceItemCommand request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        var item = await db.InvoiceItems.FindAsync(new object[] { request.Id }, cancellationToken);
        if (item == null)
        {
            return await Result<string>.FailureAsync($"Invoice Item with id: {request.Id} not found.");
        }
        item = _mapper.Map(request, item);
        item.AddDomainEvent(new InvoiceItemUpdatedEvent(item));
        await db.SaveChangesAsync(cancellationToken);
        return await Result<string>.SuccessAsync(item.Id);
    }
}
