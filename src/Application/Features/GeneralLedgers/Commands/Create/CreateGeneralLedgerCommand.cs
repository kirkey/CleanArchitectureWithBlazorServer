//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// Command and handler for creating a new GeneralLedger.
// Uses caching invalidation and domain events for data consistency.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.GeneralLedgers.Caching;

namespace CleanArchitecture.Blazor.Application.Features.GeneralLedgers.Commands.Create;

public class CreateGeneralLedgerCommand : ICacheInvalidatorRequest<Result<string>>
{
    [Description("Entry ID")]
    public string? EntryID { get; set; }
    
    [Description("Account ID")]
    public string? AccountID { get; set; }
    
    [Description("Debit")]
    public decimal Debit { get; set; }
    
    [Description("Credit")]
    public decimal Credit { get; set; }
    
    [Description("Memo")]
    public string? Memo { get; set; }

    public string CacheKey => GeneralLedgerCacheKey.GetAllCacheKey;
    public IEnumerable<string>? Tags => GeneralLedgerCacheKey.Tags;
    
    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<CreateGeneralLedgerCommand, GeneralLedger>(MemberList.None);
        }
    }
}

public class CreateGeneralLedgerCommandHandler : IRequestHandler<CreateGeneralLedgerCommand, Result<string>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;

    public CreateGeneralLedgerCommandHandler(
        IApplicationDbContextFactory dbContextFactory,
        IMapper mapper
    )
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
    }

    public async Task<Result<string>> Handle(CreateGeneralLedgerCommand request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        var item = _mapper.Map<GeneralLedger>(request);
        item.AddDomainEvent(new GeneralLedgerCreatedEvent(item));
        db.GeneralLedgers.Add(item);
        await db.SaveChangesAsync(cancellationToken);
        return await Result<string>.SuccessAsync(item.Id);
    }
}
