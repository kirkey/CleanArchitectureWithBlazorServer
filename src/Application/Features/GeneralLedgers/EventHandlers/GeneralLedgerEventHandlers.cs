//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-08-04
// Event handlers for GeneralLedger domain events.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CleanArchitecture.Blazor.Application.Features.GeneralLedgers.EventHandlers;

public class GeneralLedgerCreatedEventHandler : INotificationHandler<GeneralLedgerCreatedEvent>
{
    private readonly ILogger<GeneralLedgerCreatedEventHandler> _logger;

    public GeneralLedgerCreatedEventHandler(ILogger<GeneralLedgerCreatedEventHandler> logger)
    {
        _logger = logger;
    }
    
    public Task Handle(GeneralLedgerCreatedEvent notification, CancellationToken cancellationToken)
    {
        _logger.LogInformation("Handled domain event '{EventType}' with notification: {@Notification} ", notification.GetType().Name, notification);
        return Task.CompletedTask;
    }
}

public class GeneralLedgerUpdatedEventHandler : INotificationHandler<GeneralLedgerUpdatedEvent>
{
    private readonly ILogger<GeneralLedgerUpdatedEventHandler> _logger;

    public GeneralLedgerUpdatedEventHandler(ILogger<GeneralLedgerUpdatedEventHandler> logger)
    {
        _logger = logger;
    }
    
    public Task Handle(GeneralLedgerUpdatedEvent notification, CancellationToken cancellationToken)
    {
        _logger.LogInformation("Handled domain event '{EventType}' with notification: {@Notification} ", notification.GetType().Name, notification);
        return Task.CompletedTask;
    }
}

public class GeneralLedgerDeletedEventHandler : INotificationHandler<GeneralLedgerDeletedEvent>
{
    private readonly ILogger<GeneralLedgerDeletedEventHandler> _logger;

    public GeneralLedgerDeletedEventHandler(ILogger<GeneralLedgerDeletedEventHandler> logger)
    {
        _logger = logger;
    }
    
    public Task Handle(GeneralLedgerDeletedEvent notification, CancellationToken cancellationToken)
    {
        _logger.LogInformation("Handled domain event '{EventType}' with notification: {@Notification} ", notification.GetType().Name, notification);
        return Task.CompletedTask;
    }
}
